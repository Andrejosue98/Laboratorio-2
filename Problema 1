design.sv
module mux_4to1_case (a,b,c,d,sel,out);
	parameter N=5;
  input[N-1:0] a,b,c,d;
  input[1:0] sel;
  output reg[N-1:0] out;
  always @ (a or b or c or d or sel) begin
    case (sel)
      2'b00 : out <= a;
      2'b01 : out <= b;
      2'b10 : out <= c;
      2'b11 : out <= d;
    endcase
  end
endmodule
testbench.sv
module tb_4to1_mux;
  parameter N=4; // Bits del mensaje
  reg [N-1:0] a,b,c,d;
  wire [N-1:0] out;
  reg[1:0] sel;
  integer i;

mux_4to1_case #(.N(N))mux0( .a (a),.b (b),.c (c),.d (d),.sel (sel),.out (out));
  initial begin
    
    $monitor ("decimal: sel=%d ,a= %d ,b= %d ,c= %d ,d= %d, out= %d, __________  binario: sel=%b ,a= %b ,b= %b ,c= %b ,d= %b, out= %b  ",sel,a,b,c,d,out, sel,a,b,c,d,out  );
    
    sel =0;// Selección
    a=0; //sel=0  sel=00,
	b=0; //sel=1  sel=01
	c=0; //sel=2  sel=10
	d=0; //sel=3  sel= 11
    
   
    for (i=1; i < 50; i=i+1) begin //Número de pruebas cambiando el 50
      #5 sel =i;
	a=$random;
	b=$random;
	c=$random;
	d=$random;

    end
  	#5 $finish;
  end
endmodule

