\\ Mux 4:1

design.sv
module mux_4to1_case (a,b,c,d,sel,out);
	parameter N=5;
  input[N-1:0] a,b,c,d;
  input[1:0] sel;
  output reg[N-1:0] out;
  always @ (a or b or c or d or sel) begin
    case (sel)
      2'b00 : out <= a;
      2'b01 : out <= b;
      2'b10 : out <= c;
      2'b11 : out <= d;
    endcase
  end
endmodule
testbench.sv
module tb_4to1_mux;
  parameter N=4; // Bits del mensaje
  reg [N-1:0] a,b,c,d;
  wire [N-1:0] out;
  reg[1:0] sel;
  integer i;

mux_4to1_case #(.N(N))mux0( .a (a),.b (b),.c (c),.d (d),.sel (sel),.out (out));
  initial begin
    
    $monitor ("decimal: sel=%d ,a= %d ,b= %d ,c= %d ,d= %d, out= %d, __________  binario: sel=%b ,a= %b ,b= %b ,c= %b ,d= %b, out= %b  ",sel,a,b,c,d,out, sel,a,b,c,d,out  );
    
    sel =0;// Selección
    a=0; //sel=0  sel=00,
	b=0; //sel=1  sel=01
	c=0; //sel=2  sel=10
	d=0; //sel=3  sel= 11
    
   
    for (i=1; i < 50; i=i+1) begin //Número de pruebas cambiando el 50
      #5 sel =i;
	a=$random;
	b=$random;
	c=$random;
	d=$random;

    end
  	#5 $finish;
  end
endmodule

\\ Cod-deco gray

\\Modulo Codificador Gray

`timescale 1ns / 1ps
module CodificadorGray (binario, gray);
input [3:0] binario;
output reg [3:0] gray;
always @(*)
begin
gray[3]=binario[3];
gray[2]=binario[3] ^ binario[2];
gray[1]=binario[2] ^ binario[1];
gray[0]=binario[1] ^ binario [0];
end
endmodule  

\\ Modulo Decodificador Gray

`timescale 1ns / 1ps
module DecodificadorGray (gray, binario);
input [3:0] gray;
output reg [3:0] binario;
always@(*)
begin
binario[3]=gray[3];
binario[2]=gray[2] ^ binario[3];
binario[1]=gray[1] ^ binario[2];
binario[0]=gray[0] ^ binario[1];
end
endmodule
\\Modulo Codificador Gray conectado con Decodificador Gray

`timescale 1ns / 1ps
module cod2Dec(binarioIn,out,medio);
input [3:0] binarioIn;
output[3:0] out;
output reg [3:0] medio;
wire [3:0] wCod2Dec;
CodificadorGray U1 (.binario(binarioIn),.gray(wCod2Dec));
DecodificadorGray U2 (.gray(wCod2Dec),.binario(out));
always @(*)
begin
medio=wCod2Dec;
end
endmodule

\\ Sumador Ripple
module SumadorCompleto(a,b,Ci,Sum,Co);
    input a, b,Ci;
    output reg  Sum, Co;
    always @(*)
    begin
    Sum = (a^b^Ci);
    Co = (a&b | b&Ci | Ci&a);
    end

endmodule

module RippleCarryAdder(Sum,Co,a,b,Ci);
    input [7:0] a, b;
    input Ci;
    output [7:0]Sum;
    output Co;
    wire [6:0] carry;
    SumadorCompleto U0(a[0],b[0],Ci,      Sum[0],carry[0]);
    SumadorCompleto U1(a[1],b[1],carry[0],Sum[1],carry[1]);
    SumadorCompleto U2(a[2],b[2],carry[1],Sum[2],carry[2]);
    SumadorCompleto U3(a[3],b[3],carry[2],Sum[3],carry[3]);
    SumadorCompleto U4(a[4],b[4],carry[3],Sum[4],carry[4]);
    SumadorCompleto U5(a[5],b[5],carry[4],Sum[5],carry[5]);
    SumadorCompleto U6(a[6],b[6],carry[5],Sum[6],carry[6]);
    SumadorCompleto U7(a[7],b[7],carry[6],Sum[7],Co);
endmodule
module TestBenchRCA;
    reg [7:0] a, b;
    reg Ci;
    wire [7:0] Sum; 
    wire Co;
    RippleCarryAdder prueba(.Sum(Sum),.Co(Co),.a(a),.b(b),.Ci(Ci));
initial begin 
     a= 8'b00000000; b= 8'b00000000; Ci=1'b0;
    #10 a= 8'b00001001; b= 8'b00000111; Ci=1'b0;
    #10 a= 8'b00000001; b= 8'b00000001; Ci=1'b1;
    #10 a= 8'b11111111; b= 8'b00000001; Ci=1'b0;
    #10 $finish;
end    
endmodule

\\ Alu
`timescale 1ns / 1ps

module ALU(ALUA, ALUB, ALUFlagIn, ALUControl, ALUResult, ALUFlags, FlagZ);
parameter size=4;
input [size-1:0] ALUA,ALUB;
input ALUFlagIn;
input [3:0] ALUControl;
output reg [size-1:0] ALUResult;
output reg ALUFlags, FlagZ;
always @(ALUA or ALUB or ALUFlagIn or ALUControl)
begin
ALUFlags='b0;
case (ALUControl)
'h0: ALUResult=ALUA & ALUB;
'h1: ALUResult= ALUA | ALUB;
'h2:{ALUFlags,ALUResult}=ALUA+ALUB+ALUFlagIn;
'h3:
    begin
    case(ALUFlagIn)
    1'b0:ALUResult=ALUA+1'b1;
    1'b1:ALUResult=ALUB+1'b1;
    default: ALUResult='b0;
    endcase
    end
'h4:
    begin
    case(ALUFlagIn)
    1'b0:ALUResult=ALUA-1'b1;
    1'b1:ALUResult=ALUB-1'b1;
    default: ALUResult='b0;
    endcase
    end
'h5: 
    begin
    case (ALUFlagIn)
    1'b0: ALUResult= ~ALUA;
    1'b1: ALUResult= ~ALUB;
    default: ALUResult='b0;
    endcase
    end
'h6:{ALUFlags,ALUResult}=ALUA+((~ALUB)+1'b1)-ALUFlagIn;
'h7: ALUResult=ALUA ^ ALUB;
'h8: begin
     case (ALUFlagIn)
     'b0:{ALUFlags,ALUResult}=ALUA<<ALUB;
     'b1:{ALUFlags,ALUResult}=~((~ALUA)<<ALUB);
     default: ALUResult='b0;
     endcase
     end
'h9: begin
    case (ALUFlagIn)
    'b0:ALUResult=ALUA>>ALUB;
    'b1:
    begin
    ALUResult=~((~ALUA)>>ALUB);
    end
    default: ALUResult='b0;
    endcase
    end
default: ALUResult=1'b0;
endcase
    if(ALUResult=='b0)
    begin
    FlagZ='b1;
    end else begin
    FlagZ='b0;
    end
end
endmodule

\\Carry lookahead adder
module CLA(a,b,Ci,Sum,Co);

parameter Size=32;

input [Size-1:0] a;
input [Size-1:0] b;
input Ci;
output [Size-1:0] Sum;
output Co;

wire [Size-1:0] aa;
wire [Size-1:0] bb;
wire [Size:0] carry;

genvar j,i;
generate 
assign carry[0]=Ci;

for(j=0; j < Size; j=j+1)begin
assign aa[j]=a[j]&b[j];
assign bb[j]=a[j]|b[j];
assign carry[j+1]=aa[j]|(bb[j])&carry[j];

end
assign Co=carry[Size]; 

 for(i = 0; i < Size; i = i+1) begin 
 assign Sum[i] = a[i] ^ b[i] ^ carry[i];
 end
 endgenerate
endmodulemodule CLATestBench();
parameter Size =2;
reg Ci;
reg [Size-1:0] a;
reg [Size-1:0] b;

wire [Size-1:0] Sum;
wire Co;

CLA #(.Size(Size))U1(
       .a(a[Size-1:0]),
       .b(b[Size-1:0]),
       .Ci(Ci),
       .Sum(Sum[Size-1:0]),
       .Co(Co)
       );

initial begin
    a='b11; b='b01; Ci=1'b1;
#10 a='b01; b='b01; Ci=1'b0;
#10 $finish;
end
endmodule

